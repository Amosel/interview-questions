use convert_case::{Case, Casing};
use std::env;
use std::fs;
use std::io::Write;
use std::path::Path;
use std::process::Command;

fn main() {
    let args: Vec<String> = env::args().collect();
    if args.len() != 2 {
        println!("Usage: cargo run --bin new_problem <problem_name>");
        return;
    }

    let problem_name = &args[1];
    create_problem(problem_name);
}

fn create_problem(name: &str) {
    let safe_name = name.to_case(Case::Snake);

    // Define the path for the new problem file.
    let file_path = format!("src/bin/{}.rs", safe_name);
    if Path::new(&file_path).exists() {
        println!("Error: Problem {} already exists", safe_name);
        return;
    }

    // Template for the new problem with a placeholder solution and test.
    let template = format!(
        r#"// # Problem: {original_name}
// 
// 
// This file was autogenerated on **{date}** by running:
// 
// ```bash
// cargo run --bin new_problem {original_name}
// ```
// 
// ## Instructions to Run
// ```bash
// cargo run --bin {safe_name}
// ```

pub fn solve_{safe_name}(_: Vec<i32>) -> i32 {{
    // TODO: Implement solution.
    0
}}

fn main() {{
    println!("Running {safe_name} solution...");
}}

#[cfg(test)]
mod tests {{
    use super::*;

    #[test]
    fn test_{safe_name}() {{
        // TODO: Update test cases as needed.
        assert_eq!(solve_{safe_name}(vec![1, 2, 3]), 6);
    }}
}}
"#,
        safe_name = safe_name,
        original_name = name,
        date = chrono::Local::now().format("%Y-%m-%d")
    );
    fs::write(&file_path, template).expect("Unable to write file");

    // Append a new binary target entry in Cargo.toml.
    let cargo_entry = format!(
        "\n[[bin]]\nname = \"{name}\"\npath = \"./src/bin/{name}.rs\"\n",
        name = safe_name
    );
    fs::OpenOptions::new()
        .append(true)
        .open("Cargo.toml")
        .expect("Unable to open Cargo.toml")
        .write_all(cargo_entry.as_bytes())
        .expect("Unable to update Cargo.toml");

    // Run cargo fmt to format the new file.
    Command::new("cargo")
        .args(&["fmt"])
        .status()
        .expect("Failed to format code");

    println!("✨ Created new problem: {}", name);
    println!("📝 File created at: {}", file_path);
    println!("🔨 Run the new problem with: cargo run --bin {}", safe_name);
    println!(
        "🧪 Test the new problem with: cargo test --bin {}",
        safe_name
    );
}

#[cfg(test)]
mod tests {
    use convert_case::{Case, Casing};

    fn to_snake_case(input: &str) -> String {
        input.to_case(Case::Snake)
    }

    #[test]
    fn test_to_snake_case() {
        assert_eq!(
            to_snake_case("Balanced Delimiters Stack"),
            "balanced_delimiters_stack"
        );
        assert_eq!(to_snake_case("2Sum"), "2_sum");
        assert_eq!(to_snake_case("validParentheses"), "valid_parentheses");
        assert_eq!(to_snake_case("Valid-Parentheses"), "valid_parentheses");
        assert_eq!(to_snake_case("VALID_PARENTHESES"), "valid_parentheses");
        assert_eq!(to_snake_case("URLBuilder"), "url_builder");
        assert_eq!(to_snake_case("URL_Builder"), "url_builder");
    }
}
